Доклад по теме: Текстовая стеганография — Метод пробелов
1. Введение
1.1 Что такое стеганография
Стеганография — это наука о сокрытии информации внутри других файлов или сообщений таким образом, чтобы само наличие скрытой информации было незаметно. В отличие от криптографии, которая скрывает смысл сообщения, стеганография скрывает сам факт его существования.

Применения стеганографии включают:

Защиту конфиденциальных данных.

Защиту авторских прав.

Передачу закрытой информации в открытых каналах связи.

Обход цензуры.

1.2 Текстовая стеганография
Один из наиболее сложных и интересных видов — текстовая стеганография, поскольку:

Текст обладает высокой плотностью информации.

Любое изменение в нём заметно читателю.

Однако при грамотном подходе возможно внедрение скрытой информации без нарушения читаемости и структуры.

2. Цель и задачи работы
Цель:
Разработать графическое приложение, позволяющее внедрять и извлекать произвольную текстовую информацию в/из текстового документа методом пробелов.

Задачи:

Реализовать удобный интерфейс пользователя.

Обеспечить загрузку и сохранение файлов.

Реализовать алгоритм встраивания и извлечения сообщения.

Провести тестирование и оценку эффективности метода.

3. Метод пробелов: описание и принцип работы
3.1 Суть метода
Метод пробелов основывается на незаметных для пользователя различиях в количестве пробелов между словами:

Один пробел (" ") — кодирует бит 0.

Два пробела (" ") — кодирует бит 1.

Это изменение визуально почти не отличается в большинстве редакторов и браузеров, особенно если текст выводится с выравниванием или переносом строк.

3.2 Этапы работы алгоритма
Этап 1: Преобразование сообщения
Каждому символу сообщения соответствует его 8-битное бинарное представление.

Встроенное сообщение дополняется нулевым символом ('\0'), чтобы точно определить его конец.

Пример:
Символ 'A' → ASCII 65 → Бинарно: 01000001

Этап 2: Встраивание в текст
Загружается исходный текст.

Он разбивается на последовательность слов.

Между словами вставляются пробелы в соответствии с битами скрытого сообщения.

Этап 3: Извлечение
Из текста извлекаются пробелы между словами.

Одинарный пробел интерпретируется как 0, двойной как 1.

Бинарная строка группируется по 8 бит и декодируется в символы.

Чтение заканчивается при обнаружении нулевого символа (00000000).

4. Реализация
4.1 Язык и библиотеки
Язык программирования: Python 3.

GUI: Tkinter.

Работа с текстовыми файлами в кодировке UTF-8.

4.2 Интерфейс приложения
Приложение включает:

Кнопку загрузки текста.

Поле ввода сообщения.

Кнопку встраивания.

Кнопку сохранения результата.

Кнопку извлечения скрытого сообщения.

Поле для вывода извлечённого текста.

4.3 Структура программы
load_text() — загрузка исходного текста из файла.

embed_message() — внедрение сообщения в пробелы текста.

save_text() — сохранение текста с внедрённым сообщением.

extract_message() — извлечение сообщения из текста.

5. Пример работы
Допустим, мы хотим встроить сообщение "HI":

'H' = 72 = 01001000
'I' = 73 = 01001001
→ Общая бинарная строка: 0100100001001001

Текст состоит из не менее 16 слов, между которыми кодируются биты:

0 → " "

1 → " "

Встроенный текст визуально почти не отличается, но содержит информацию, которую можно извлечь тем же алгоритмом.

Результат извлечения: HI

6. Преимущества и недостатки метода
Преимущества:
Простота реализации.

Полная читаемость текста сохраняется.

Незаметность для пользователя.

Недостатки:
Низкая ёмкость: 1 бит на одно слово.

Уязвимость при переформатировании (например, если текст скопировать в редактор, который удаляет лишние пробелы).

Легко детектируется при анализе шаблонов пробелов.

7. Тестирование и результаты
Были использованы тексты из открытой библиотеки Project Gutenberg (например, «Алиса в стране чудес»). Результаты:

Сообщение	Длина	Кол-во бит	Необходимые слова	Успешно встроено/извлечено
HELLO	5 симв	40 бит	≥ 40 слов	Да
SECRETMSG	9 симв	72 бит	≥ 72 слова	Да

Текст после внедрения визуально не изменяется. Сообщение полностью восстанавливается при извлечении.

8. Заключение
В данной работе был реализован простой и эффективный метод стеганографии в текстовых файлах — метод пробелов. Он позволяет внедрять скрытую информацию без изменения структуры текста и заметных визуальных изменений.

Метод хорошо подходит для изучения основ стеганографии, но в практических задачах его следует дополнять методами шифрования и контролем форматирования.

9. Перспективы развития
Добавление сжатия данных перед внедрением.

Шифрование внедряемого сообщения.

Использование невидимых символов Unicode.

Объединение с методами на основе синонимов и перефразирования.

Поддержка HTML/LaTeX-документов.